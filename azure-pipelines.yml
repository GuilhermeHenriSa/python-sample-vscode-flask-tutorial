trigger:
- main

resources:
- repo: self

variables:
  repository: 'guilhermehenriquesa/python-flask-api'
  tag: '$(Build.BuildId)'
  imageName: 'imageName'

stages:
- stage: Test
  displayName: Test Python Package
  jobs:
  - job: Test
    displayName: Test on Multiple Python Versions
    strategy:
      matrix:
        Python310:
          python.version: '3.10'
        
    pool:
      name: GuiPc
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
      displayName: 'Use Python 3.10'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        pip install pytest pytest-azurepipelines
        pytest
      displayName: 'Run Tests'

- stage: Build
  displayName: Build and Scan Docker Image
  dependsOn: Test
  jobs:
  - job: Build
    displayName: Build Docker Image
    pool:
      name: GuiPc
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'dockerhub'
        repository: $(repository)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
      env:
        DOCKER_BUILDKIT: 1

    - script: |
        tar --version
        wget https://cli.artifactscan.cloudone.trendmicro.com/tmas-cli/latest/tmas-cli_Linux_x86_64.tar.gz
        export DOCKER_BUILDKIT=1
      displayName: Get Latest Version of TMAS

    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: '**/tmas-cli_Linux_x86_64.tar.gz'
        destinationFolder: 'tmas-cli'
        cleanDestinationFolder: true
        overwriteExistingFiles: true

    - task: Bash@3
      displayName: Save Docker Image
      inputs:
        targetType: 'inline'
        script: |
          docker save $(repository):$(tag) -o image.tar

    - task: Bash@3
      displayName: Scan Image from Docker Registry with TMAS
      inputs:
        targetType: 'inline'
        script: |
          ./tmas-cli/tmas scan docker:$(repository):$(tag) --malware --saveSBOM > result.json
      env:
        TMAS_API_KEY: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJjaWQiOiIyYzZmNmU1ZC1lMmVhLTQ1MmQtOGVkNC0wZWE5MzRlMjQyMzciLCJjcGlkIjoic3ZwIiwicHBpZCI6ImN1cyIsIml0IjoxNzQ2NDcyODg3LCJldCI6MTc3ODAwODg4NywiaWQiOiJmZjUwYTc3ZS05NDRhLTRkMjUtODZhNS04NjE2YWIwYTI4YmMiLCJ0b2tlblVzZSI6ImN1c3RvbWVyIn0.WtTZO77PKnRGSfgSc7-IU3-YqV_f64fl7dWX_Sx29UlRRIbYh-iXiOKo0XwnPSp0LlClOecMw8t8aVrtTDn0of3s5lBw5vESsigbWgpsrHr3ROnxCj877a1uVYXyinIVUuVt0l8zkaqIjDTsJ77qdTfoUGaEI09yoQM4Ys9jGV9EtA1zHIQ8G18t4M0MjVdKoNSvQX7YDNfYpDCXr87GqV-PK-gzt3HwDj-1_HptIPTv3h-ecLk9IXzRTh2liQVVNpiATnAybGTe1Kt1nxNhoGUlFVd6nCB_3liQkaDK81WhE_UwtXM7nbkvc1dqiYohtueX_gV3eL95m800gq6OIyLmXgA3ypa54o67Mhx3zqvKv_thKht8ULU2xKGdlRreXqxjkBe88cmnrr83b6NjhxybO7DjDn7fBpgQVtyLKxHebWy7ZjzeFqzYDZRagsWeycpbCazpSNHGaxyUksLkC9wG2w_W_poBzOM_-rFaVzObJg_Z0vZybfuXDVIoG5cT9J6urqU88A14IdcWrOwqNe5pbdOBv_ff2PpTnzeoprYlJxDXVa1AgWdS-jyMfI_ILbdS5DIkdtZm9rrFzBd0mCOr7gDGLrH6xWY7wx_P4VdacopchvJZcS6zZcd3DPxshsXhA6iJHlgE4TH6YwrHqLIIFoOKH0BbuBClINP-gWM'

    - script: |
        git clone https://github.com/XeniaP/CS-ArtifactScanner-Report.git
        pip install -r ./CS-ArtifactScanner-Report/requirements.txt
        echo "$(System.DefaultWorkingDirectory)"
        python ./CS-ArtifactScanner-Report/export_report_tmas.py $(imageName) --resultFile ./result.json
        ls -la
        FILE=$(ls *.xlsx | head -n 1)
        echo "##vso[task.setvariable variable=excelFileName]$FILE"
      displayName: Create Excel Report with Vulnerabilities

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/$(excelFileName)'
        publishLocation: 'pipeline'
      displayName: Publish Excel Report
